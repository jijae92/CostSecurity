"""Security Hub client helpers."""

from __future__ import annotations

import json
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List

import boto3
from botocore.config import Config
from botocore.exceptions import BotoCoreError, ClientError
from tenacity import RetryError, retry, retry_if_exception_type, stop_after_attempt, wait_exponential_jitter

from src.common.log import get_logger

LOGGER = get_logger(__name__)


@dataclass(slots=True)
class SecurityHubClient:
    """Fetch findings from AWS Security Hub."""

    client: Any
    sample_data_root: Path
    dry_run: bool

    @classmethod
    def from_config(cls, config: "AppConfig") -> "SecurityHubClient":
        session = boto3.session.Session(region_name=config.aws_region)
        boto_config = Config(connect_timeout=10, read_timeout=10, retries={"max_attempts": 3})
        sh_client = session.client("securityhub", config=boto_config)
        return cls(client=sh_client, sample_data_root=config.sample_data_path, dry_run=config.dry_run)

    def find_findings(self, *, filters: Dict[str, List[Dict[str, str]]] | None = None) -> Dict[str, Any]:
        if self.dry_run:
            LOGGER.debug("Loading security findings sample dataset.")
            return self._load_sample("security_hub_findings_sample.json")

        try:
            return self._paged_findings(filters=filters)
        except RetryError as exc:
            LOGGER.error("Security Hub request exhausted retries", extra={"filters": filters})
            raise RuntimeError("Security Hub unavailable; retry later.") from exc

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential_jitter(exp_base=2, max=10),
        retry=retry_if_exception_type((ClientError, BotoCoreError)),
        reraise=True,
    )
    def _paged_findings(self, *, filters: Dict[str, List[Dict[str, str]]] | None) -> Dict[str, Any]:
        paginator = self.client.get_paginator("get_findings")
        findings: List[Dict[str, Any]] = []
        for page in paginator.paginate(Filters=filters or {}):
            findings.extend(page.get("Findings", []))
        return {"Findings": findings}

    def _load_sample(self, filename: str) -> Dict[str, Any]:
        sample_path = self.sample_data_root / filename
        if not sample_path.exists():
            raise FileNotFoundError(f"Sample data file missing: {sample_path}")
        with sample_path.open("r", encoding="utf-8") as handle:
            return json.load(handle)


from src.common.config import AppConfig  # noqa: E402  pylint: disable=wrong-import-position
